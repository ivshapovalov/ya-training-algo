package algo.c5.hw4;

import algo.ContestTask;
import org.junit.jupiter.api.Test;

import java.util.Scanner;

/*
https://contest.yandex.ru/contest/59542/problems/H/
Выборы

Ограничение времени 	2 секунды
Ограничение памяти 	256Mb
Ввод 	стандартный ввод или input.txt
Вывод 	стандартный вывод или output.txt

В одной демократической стране приближаются парламентские выборы. Выборы проходят по следующей схеме: каждый житель
страны, достигший восемнадцатилетнего возраста, отдает свой голос за одну из политических партий. После этого партия,
которая набрала максимальное количество голосов, считается победившей на выборах и формирует правительство. Если
несколько партий набрали одинаковое максимальное количество голосов, то они должны сформировать коалиционное
правительство, что обычно приводит к длительным переговорам.

Один бизнесмен решил выгодно вложить свои средства и собрался поддержать на выборах некоторые партии. В результате
поддержки он планирует добиться победы одной из этих партий, которая затем сформирует правительство, которое будет
действовать в его интересах. При этом возможность формирования коалиционного правительства его не устраивает, поэтому он
планирует добиться строгой победы одной из партий.

Чтобы повлиять на исход выборов, бизнесмен собирается выделить деньги на агитационную работу среди жителей страны.
Исследование рынка показало, что для того, чтобы один житель сменил свои политические воззрения, требуется потратить
одну условную единицу. Кроме того, чтобы i-я партия в случае победы сформировала правительство, которое будет
действовать в интересах бизнесмена, необходимо дать лидеру этой партии взятку в размере pi условных единиц. При этом
некоторые партии оказались идеологически устойчивыми и не согласны на сотрудничество с бизнесменом ни за какие деньги.

По результатам последних опросов известно, сколько граждан планируют проголосовать за каждую партию перед началом
агитационной компании. Помогите бизнесмену выбрать, какую партию следует подкупить, и какое количество граждан придется
убедить сменить свои политические воззрения, чтобы выбранная партия победила, учитывая, что бизнесмен хочет потратить на
всю операцию минимальное количество денег.

Формат ввода
В первой строке вводится целое число n – количество партий (1 ≤ n ≤ 105). Следующие n строк описывают партии. Каждая из
этих строк содержит по два целых числа: vi – количество жителей, которые собираются проголосовать за эту партию перед
началом агитационной компании, и pi – взятка, которую необходимо дать лидеру партии для того, чтобы сформированное ей в
случае победы правительство действовало в интересах бизнесмена (1 ≤ vi ≤ 106, 1 ≤ pi ≤ 106 или pi = -1). Если партия
является идеологически устойчивой, то pi равно -1. Гарантируется, что хотя бы одно pi не равно -1.

Формат вывода
В первой строке выведите минимальную сумму, которую придется потратить бизнесмену. Во второй строке выведите номер
партии, лидеру которой следует дать взятку. В третьей строке выведите n целых чисел – количество голосов, которые будут
отданы за каждую из партий после осуществления операции. Если оптимальных решений несколько, выведите любое.
*/

public class TaskH extends ContestTask {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt(); // количество партий
        int[] vi = new int[n]; // количество жителей, голосующих за каждую партию
        int[] pi = new int[n]; // взятка для каждой партии

        // Считываем входные данные
        for (int i = 0; i < n; i++) {
            vi[i] = scanner.nextInt();
            pi[i] = scanner.nextInt();
        }

        // Инициализация границ для бинарного поиска
        int left = 0;
        int right = (int) 1e6;

        // Бинарный поиск минимальной взятки
        int minBribe = Integer.MAX_VALUE;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            boolean isPossible = false; // флаг для проверки возможности выбора партии для подкупа

            for (int i = 0; i < n; i++) {
                if (pi[i] != -1 && pi[i] <= mid) {
                    isPossible = true;
                    break;
                }
            }

            if (isPossible) {
                minBribe = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        // Находим количество голосов за каждую партию после подкупа
        int minBribeParty = -1;
        int[] votesAfterBribe = new int[n];
        for (int i = 0; i < n; i++) {
            if (pi[i] == minBribe) {
                minBribeParty = i + 1;
            }
            votesAfterBribe[i] = vi[i] + (pi[i] <= minBribe ? 0 : 1);
        }

        // Вывод результата
        System.out.println(minBribe);
        System.out.println(minBribeParty);
        for (int i = 0; i < n; i++) {
            System.out.print(votesAfterBribe[i] + " ");
        }
    }

    @Test
    public void test_001() {
        provideConsoleInput("3\n" +
                "7 -1\n" +
                "2 8\n" +
                "1 2\n");
        main(new String[0]);
        String expected = "6\n" +
                "3\n" +
                "3 2 5 \n";
        assertStringEqualsIgnoreLineSeparators(expected, getOutput());
    }

}
