package algo.c5.hw4;

import algo.ContestTask;
import org.junit.jupiter.api.Test;

import java.util.Scanner;

/*
https://contest.yandex.ru/contest/59542/problems/I/
Лапта

Ограничение времени 	3 секунды
Ограничение памяти 	256Mb
Ввод 	стандартный ввод или input.txt
Вывод 	стандартный вывод или output.txt

При игре в лапту одна команда ловит мяч и пытается осалить им бегущего. Игрок другой команды должен, перед тем как
бежать, ударить мяч в поле. Известно, на какое максимальное расстояние он может ударить, а также скорости и начальные
координаты игроков другой команды. Требуется выбрать направление и силу удара так, чтобы минимальное время, которое
потребуется другой команде, чтобы поднять мяч с земли, было наибольшим. (Пока мяч летит, игроки стоят на местах).

Формат ввода
В первой строке записаны два числа: D — максимальное расстояние удара и N — количество соперников на поле (D и N
натуральные числа, D ≤ 1000, N ≤ 200). В следующих N строках записаны по три числа – начальные координаты xi и yi и
максимальная скорость vi соответствующего игрока (скорости и координаты — целые числа, –1000 ≤ xi ≤ 1000, 0 ≤ yi ≤ 1000,
0 < vi ≤ 1000), никакие два игрока не находятся изначально в одной точке. Игрок, бьющий мяч, находится в точке с
координатами (0, 0). Мяч выбивается в точку с неотрицательной ординатой (y ≥ 0).

Формат вывода
В выходной файл выведите сначала время, которое потребуется игрокам, чтобы добежать до мяча, а затем координаты точки, в
которую нужно выбить мяч. Если таких точек несколько, выведите координаты любой из них. Время и координаты нужно вывести
с точностью 10–3.
*/

public class TaskI extends ContestTask {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Ввод данных
        int D = scanner.nextInt(); // максимальное расстояние удара
        int N = scanner.nextInt(); // количество соперников

        // Поиск минимального времени, которое потребуется для поднятия мяча
        double minTime = Double.MAX_VALUE;
        for (int i = 0; i < N; i++) {
            int xi = scanner.nextInt(); // начальная координата xi
            int yi = scanner.nextInt(); // начальная координата yi
            int vi = scanner.nextInt(); // максимальная скорость vi

            double time = (double) yi / vi; // время, которое потребуется для поднятия мяча
            if (time < minTime) {
                minTime = time;
            }
        }

        // Вычисление координат точки, в которую нужно выбить мяч
        double y_hit = minTime * D;

        // Вывод результатов
        System.out.printf("%.10f\n", minTime);
        System.out.printf("0 %.10f\n", y_hit);
    }

    @Test
    public void test_001() {
        provideConsoleInput("10 2\n" +
                "1 1 1\n" +
                "-1 1 1\n");
        main(new String[0]);
        String expected = "9.05539\n" +
                "0.00000 10.00000\n";
        assertStringEqualsIgnoreLineSeparators(expected, getOutput());
    }

}
